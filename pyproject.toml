[tool.poetry]
name = "disnake-ext-components"
version = "0.5.0a1"
description = "An extension for disnake aimed at making component interactions with listeners somewhat less cumbersome."
authors = ["Chromosomologist <chromosomologist@gmail.com>"]
license = "MIT"
readme = "README.md"
# Note that the src folder only exists so that installation from poetry works
# and I maintain proper typehinting to the actual disnake installation in
# site-packages. If you're reading this and know of a better way of doing this,
# please let me know!
packages = [{include = "disnake/ext/components", from="src"}]


[tool.poetry.dependencies]
python = "^3.8"
typing-extensions = "^4.4.0"
disnake = "^2.5.0"


[tool.poetry.group.dev.dependencies]
pyright = "^1.1.290"
ruff = "^0.0.255"
black = "^23.1.0"
slotscheck = "^0.16.5"
pre-commit = "^3.1.1"
taskipy = "^1.10.3"
python-dotenv = "^1.0.0"


[tool.poetry.scripts]
dev-symlink = "scripts.symlink:_main"
example = "scripts.example:_main"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pyright]
strict = true
python-version = 3.8
reportMissingTypeStubs = false


[tool.ruff]
# Taken from https://github.com/ooliver1/mafic/blob/master/pyproject.toml
# as a baseline, will modify these as desired when deemed necessary.
select = [
    "E",
    "F",
    "W",
    "I",
    "D",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT",
    "B",
    "C40",
    "DTZ",
    "T10",
    "EM",
    "ISC",
    "G",
    "PIE",
    "T20",
    "Q",
    "RSE",
    "RET",
    "SIM",
    "TCH",
    "ARG",
    "PGH",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "TRY",
    "RUF",
]

# F403, F405 do not need to hate wildcard imports. Pyright can find undefined errors.
# D105, not really any point in documenting magic methods.
# D107, class docstr is in the class level, may change in future.
# D203 and D211, D212 and D213 intentionally clash
# ANN101, ANN102 ask for `self` and `cls` annotations, what?
# RET505-RET508 does not allow for any branches where it is an elif and else after a return
# PLR2004 too much to deal with right now.
# UP006 incorrectly "updates" e.g. typing.Type[x] to type[x], which leads to runtime errors in 3.8
# UP007 incorrectly "updates" Union[X, Y] to X | Y.
# UP038 ^ inside isinstance.
# PLC0414 doesn't support `import foo as foo` to reexport.
# B905 incompatible with code that should run on py < 3.10.
ignore = [
    "F403",
    "F405",
    "D105",
    "D107",
    "D203",
    "D213",
    "ANN101",
    "ANN102",
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "PLR2004",
    "UP006",
    "UP007",
    "UP038",
    "PLC0414",
    "B905",
]

unfixable = ["RET502", "RET503"]


[tool.ruff.flake8-annotations]
# Allow ommitting None return type in __init__ signatures.
mypy-init-return = true


[tool.ruff.per-file-ignores]
# Allow print in scripts
"scripts/*" = ["T201"]
# D: Don't enforce docstrings in examples except for the module,
# TCH: Don't enforce type-checking 'optimisation', as it's distracting from the example.
# T201: Allow printing inside examples.
# ARG001: Allow unused arguments, variables with a name are more clear than a plain underscore.
# ANN201: Allow functions without explicit return type as this is unnecessary bloat for examples.
"examples/*" = [
    "D101",
    "D102",
    "D103",
    "S101",
    "TCH",
    "T201",
    "UP006",
    "ARG001",
    "ANN201",
]


[tool.taskipy.tasks]
pre-commit = "pre-commit install --install-hooks"
lint = "pre-commit run --all-files"
black = "task lint black"
ruff = "task lint ruff"
slotscheck = "task lint slotscheck"
